{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","layoutName","input","txtgen","require","sentence","_this","replace","toLowerCase","stringSimilarity","similarity","enterClicked","onChange","setState","keyboard","setInput","onKeyPress","button","handleEnter","onChangeInput","event","target","value","compareTwoStrings","alert","_this2","this","react_default","a","createElement","className","Input_default","placeholder","fullWidth","e","build_default","ref","r","layout","default","display","{ent}","{backspace}","{space}","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOA2FeA,6MApFbC,MAAQ,CACNC,WAAY,UACZC,MAAO,OAITC,OAASC,EAAQ,MACjBC,SAAWC,EAAKH,OAAOE,aACvBA,SAAWC,EAAKD,SAASE,QAAQ,YAAa,MAC9CF,SAAWC,EAAKD,SAASG,gBAEzBC,iBAAmBL,EAAQ,MAC3BM,WAAa,KACbC,cAAe,IAEfC,SAAW,SAAAV,GACTI,EAAKO,SAAS,CACZX,MAAOA,GAEP,WACEI,EAAKQ,SAASC,SAASb,QAI5Bc,WAAa,SAACC,GACE,UAAXA,GACDX,EAAKY,iBAGTC,cAAgB,SAAAC,GAChB,IAAIlB,EAAQkB,EAAMC,OAAOC,MACzBhB,EAAKO,SACH,CACEX,MAAOA,GAET,WACEI,EAAKQ,SAASC,SAASb,QAO7BgB,YAAc,WACZZ,EAAKI,WAAaJ,EAAKG,iBAAiBc,kBAAkBjB,EAAKD,SAAUC,EAAKN,MAAME,OACpFI,EAAKK,cAAe,EACpBa,MAAM,8BAA8BlB,EAAKI,WAAW,kGAG5C,IAAAe,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,UAAKH,KAAKrB,UACRsB,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEN,MAAOI,KAAK1B,MAAME,MAClB8B,YAAa,iCACbC,UAAU,OACVrB,SAAU,SAAAsB,GAAC,OAAIT,EAAKN,cAAce,MAEpCP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CACAQ,IAAK,SAAAC,GAAC,OAAKZ,EAAKX,SAAWuB,GAC3BpC,WAAYyB,KAAK1B,MAAMC,WACvBqC,OAAS,CACPC,QAAW,CACT,sBACC,oBACA,4BACA,kBAELC,QAAS,CACPC,QAAS,QACTC,cAAe,SACfC,UAAU,KAEZ/B,SAAU,SAAAV,GAAK,OACbuB,EAAKb,SAASV,IAChBc,WAAY,SAAAC,GAAM,OAChBQ,EAAKT,WAAWC,cA9ER2B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b71dec15.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Keyboard from 'react-simple-keyboard';\nimport 'react-simple-keyboard/build/css/index.css';\nimport './App.css';\nimport Input from '@material-ui/core/Input';\n\nclass App extends Component {\n  state = {\n    layoutName: \"default\",\n    input: \" \"\n  };\n\n  //Generate random sentence using txtgen\n  txtgen = require('txtgen');\n  sentence = this.txtgen.sentence();\n  sentence = this.sentence.replace(/[^\\w\\s]/gi, '')\n  sentence = this.sentence.toLowerCase();\n\n  stringSimilarity = require('string-similarity');\n  similarity = \"\";\n  enterClicked = false;\n\n  onChange = input => {\n    this.setState({\n      input: input\n    },\n      () => {\n        this.keyboard.setInput(input);\n      });\n  };\n\n   onKeyPress = (button) => {\n     if(button === '{ent}'){\n       this.handleEnter();\n     }\n   };\n   onChangeInput = event => {\n   let input = event.target.value;\n   this.setState(\n     {\n       input: input\n     },\n     () => {\n       this.keyboard.setInput(input);\n     }\n   );\n };\n\n//Compares the degree of similarity between two strings, based on Dice's Coefficient\n//Using string-similarity\n handleEnter = () => {\n   this.similarity = this.stringSimilarity.compareTwoStrings(this.sentence, this.state.input);\n   this.enterClicked = true;\n   alert(\"The text you entered has a \"+this.similarity+\" degree of similarity\" );\n };\n\n  render() {\n    return (\n      <div className=\"App\">\n      <h2>{this.sentence}</h2>\n        <Input\n          value={this.state.input}\n          placeholder={\"Please enter the above setence\"}\n          fullWidth=\"true\"\n          onChange={e => this.onChangeInput(e)}\n        />\n        <Keyboard\n        ref={r => (this.keyboard = r)}\n        layoutName={this.state.layoutName}\n        layout= {{\n          \"default\": [\n            \"q w e r t y u i o p\",\n             \"a s d f g h j k l\",\n             \"z x c v b n m {backspace}\",\n             \"{space} {ent}\"\n        ]}}\n        display={{\n          \"{ent}\": \"Enter\",\n          \"{backspace}\": \"âŒ«\",\n          \"{space}\":\" \",\n        }}\n        onChange={input =>\n          this.onChange(input)}\n        onKeyPress={button =>\n          this.onKeyPress(button)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}